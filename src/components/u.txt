import {Container,
    createTheme,
    TableCell,
    LinearProgress,
    ThemeProvider,
    Typography,
    TextField,
    makeStyles,
    TableBody,
    TableRow,
    TableHead,
    TableContainer,
    Table,
    Paper } from '@material-ui/core';
import axios from 'axios';
import React, { useState, useEffect } from 'react';
import { CoinList } from "../../src/config/api";
import { CryptoState } from "../Cryptocontext";
import { useNavigate } from "react-router-dom";
// import Pagination from "@material-ui/lab/Pagination";

export function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

const Coinstable = () => {
    const [coins, setCoins] = useState([]);
    const [loading, setLoading] = useState(false);
    const [search, setSearch] = useState();
    // const [page, setPage] = useState(1);

    const { currency, symbol } = CryptoState();

    const useStyles = makeStyles({
        row: {
          backgroundColor: "#16171a",
          cursor: "pointer",
          "&:hover": {
            backgroundColor: "#131111",
          },
          fontFamily: "IBM Plex Serif",
        },
        
      });

      const classes = useStyles();
      const navigate = useNavigate();

    const fetchCoins = async () => {
        setLoading(true);
        const { data } = await axios.get(CoinList(currency))

        setCoins(data);
        setLoading(false);
    }

    useEffect(() => {
        fetchCoins();
        // eslint-disable-next-line
    }, [currency])

    const darkTheme = createTheme ({
        palette: {
          mode: 'dark',
        },
      });

      const handleSearch = () => {
        return coins.filter(
          (coin) =>
            coin.name.toLowerCase().includes(search) ||
            coin.symbol.toLowerCase().includes(search)
        );
      };
    

    return (
    <ThemeProvider theme={darkTheme}>
     <Container style={{textAlign: "center"}}>
      <Typography
       variant='h4'
       style={{margin: 18, FontFamily: "IBM Plex Serif"}}
      >
        Cryptocurrency Prices by Market Cap
      </Typography>

      <TextField 
        label="Search For a Crypto Currency"
        variant="outlined"
        style={{
            marginBottom: 20, width: "100%"
        }}
        onChange={(e) => setSearch(e.target.value)}
      />
      <TableContainer component={Paper}>
      {
        loading ? (
            <LinearProgress style={{backgroundColor: "gold"}} />
        ) : (
            <Table aria-label="simple table">
              <TableHead style={{ backgroundColor: "#EEBC1D" }}>
                <TableRow>
                  {["Coin", "Price", "24h Change", "Market Cap"].map((head) => (
                    <TableCell
                      style={{ color: "black", fontWeight: "700", fontFamily: "IBM Plex Serif",
                      }}
                      key={head}
                      align={head === "Coin" ? "" : "right"}
                    >
                      {head}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
                   {/* .slice((page - 1) * 10, (page - 1) * 10 + 10).map((row)  */}
              <TableBody>
                {handleSearch = () => {
                    const profit = row.price_change_percentage_24h > 0;
                    return (
                      <TableRow onClick={() => navigate(`/coins/${row.id}`)} className={classes.row} key={row.name} >

                        <TableCell component="th" scope="row" style={{ display: "flex", gap: 15, }}>
                          <img src={row?.image} alt={row.name} height="50" style={{ marginBottom: 10 }} />

                          <div style={{ display: "flex", flexDirection: "column" }}>
                          </div>
                          </TableCell>    
                          {/* <span style={{textTransform: "uppercase", fontSize: 22}}>{row.symbol}</span>
                            <span style={{ color: "darkgrey" }}>{row.name}</span>
                          
                        

                        <TableCell align="right">
                          {symbol}{" "}
                          {numberWithCommas(row.current_price.toFixed(2))}
                        </TableCell>

                        <TableCell align="right" style={{ color: profit > 0 ? "rgb(14, 203, 129)" : "red", fontWeight: 500, }}>
                          {profit && "+"}
                          {row.price_change_percentage_24h.toFixed(2)}%
                        </TableCell>

                        <TableCell align="right"> 
                        {symbol}{" "} {numberWithCommas( row.market_cap.toString().slice(0, -6) )}M
                        </TableCell> */}
                      </TableRow>
                    );
              })};
              </TableBody>
            </Table>
        )
      }

      </TableContainer>

     </Container>

    </ThemeProvider>
  )
}

export default Coinstable 